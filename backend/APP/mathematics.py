import sympy as sp 
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("error")
warnings.filterwarnings("ignore", category=UserWarning)

x = sp.Symbol('x')
# done by Shokhrukh
def Newton_Method(input_function: str, first_guess: int, number_of_iterations: int) -> str:
    try:
        input_function = sp.sympify(input_function.replace('e', 'E')) #replaces 
        f = sp.lambdify(x, input_function) #lambdify expression of the input function
        f_d = sp.lambdify(x, sp.diff(input_function, x))  #lambdify expression of the derivative of the input function
        x_i = first_guess
        for i in range(number_of_iterations):
            x_i = x_i - (f(x_i)/f_d(x_i))
        if f(x_i) > 0.000001:
            return "Please check the function. Probably, it does not have any roots"
        else:
            return str(x_i)
    except RuntimeWarning:
        return "Please change your first guess. Perhaps, the method came across with vertex or new x_i are diverging instead of converging."
########################################################################################################################


#Done by Aisha
def Differentiating_Calculator(function: str) -> str:

    function = function.replace('e', 'E')
    function = sp.sympify(function)
    function_prime = function.diff(x)  
    function = sp.lambdify(x, function) 

    return str(function_prime)
########################################################################################################################


# done by Tariq

# -*- coding: utf-8 -*-
"""Rectangle_Method_Modified.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lXF5JmlWmD8TCCBaWlmVnOhXY6m-ANC_
"""

# Commented out IPython magic to ensure Python compatibility.




def Rectangle_Method(function:str, init_point:int, end_point:int, num_of_interval:int)->str:
  
    x = sp.symbols('x')
    function = sp.lambdify(x, function)
    dx = (end_point - init_point)/num_of_interval
    total = 0.0

    for i in range (num_of_interval):
        total = total + function((init_point + (i*dx)))

    area = dx*total

    return str(area) 



# def Rectangle_method_graph(function:str, init_point:int, end_point:int, num_of_interval:int):

#     X = np.linspace(init_point,end_point,100)
#     x = np.linspace(init_point,end_point,num_of_interval+1)
#     Y = function(X)
#     plt.figure(figsize = (15,10))
#     plt.plot(X,Y, color='black', linewidth=2, markersize=50)

#     for i in range(num_of_interval):
#         init_point = [x[i],x[i],x[i+1],x[i+1]]
#         end_point = [0,function(x[i]),function(x[i]),0]
#         plt.fill_between(init_point,end_point, edgecolor='black')
#         plt.savefig('Rectangle_Method_Graph.png')


########################################################################################################################


# done by Tariq

